node {
    parameters {
        choice(choices: 'dev\nprod', description: 'What Wokspace?', name: 'WORKSPACE')
    }

    stage ('Container preparation') {
        checkout(
                [$class: 'GitSCM',
                branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [],
                userRemoteConfigs: [[url: 'https://github.com/shefeg/wp_app_aws_terraform.git']]]
                )
        // def container = docker.build('container')
        def container = docker.build('container', '-f Dockerfile_data .')
        container.inside {
            stage ('Checkout') {
                checkout(
                    [$class: 'GitSCM',
                    branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'bitbucket_key', url: 'git@github.com:shefeg/wp_app_aws_terraform.git']]]
                )
            }
        
            stage ('Test Terraform') {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                    mkdir -p target/test-report
                    terraform --version >> target/test-report/test.txt && \
                    terraform init && \
                    terraform workspace new ${params.WORKSPACE} || terraform workspace select ${params.WORKSPACE} && \
                    terraform validate >> target/test-report/test.txt
                    echo "<stdout>\$(cat target/test-report/test.txt)</stdout>" > target/test-report/test.xml
                    """
                }
                junit 'target/test-report/*.xml'
            }
            stage ('Terraform Destroy') {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    env.ANSWER = input message: 'Do you really want to destroy?'
                    sh "terraform destroy -force && aws s3 cp s3://${BUCKET}/env:/${params.WORKSPACE}/terraform.tfstate target/${params.WORKSPACE}-terraform.tfstate"
                }
                archive 'target/*.tfstate'
            }
        }
    }
}