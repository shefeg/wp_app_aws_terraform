node {
    parameters {
        choice(choices: 'default\ndev\nprod', description: 'What Wokspace?', name: 'WORKSPACE')
    }
    stage ('Container preparation') {
        checkout(
                [$class: 'GitSCM',
                branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [],
                userRemoteConfigs: [[url: 'https://github.com/shefeg/wp_app_aws_terraform.git']]]
                )
        def container = docker.build('container')
        container.inside {
            stage ('Checkout') {
                git url: 'https://github.com/shefeg/wp_app_aws_terraform.git'
            }
        
            stage ('Test Terraform') {
                sh 'terraform --version'
            }
            
            stage ('Terraform Deployment') {
                
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "terraform init && terraform workspace new ${params.WORKSPACE} || terraform workspace select ${params.WORKSPACE}"
                    input message: 'Do you really want to destroy?', parameters: [choice(choices: 'no\nyes', description: 'What is the answer?', name: 'ANSWER')]
                    sh """
                        if [ "${ANSWER}" == 'yes' ]; then
                            terraform destroy -force
                            aws s3 cp s3://${BUCKET}/env:/${params.WORKSPACE}/terraform.tfstate target/${params.WORKSPACE}-terraform.tfstate
                        else
                            aws s3 cp s3://${BUCKET}/env:/${params.WORKSPACE}/terraform.tfstate target/${params.WORKSPACE}-terraform.tfstate
                        fi
                    """
                }
                archive 'target/*.tfstate'
            }
        }
    }
}