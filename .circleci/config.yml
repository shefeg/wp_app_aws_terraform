version: 2


jobs:
  remote_state:
    docker:
      - image: cgswong/aws:latest
    steps:
      - checkout
      - run:
          name: Terraform S3 remote state
          command: |
            source env.txt
            export $(cut -d= -f1 env.txt)
            chmod +x .circleci/circleci_init.sh
            ./.circleci/circleci_init.sh

  terraform:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: Install Terraform
          command: |
            apt-get update
            apt-get install unzip wget -y
            wget https://releases.hashicorp.com/terraform/0.11.3/terraform_0.11.3_linux_amd64.zip
            unzip terraform_0.11.3_linux_amd64.zip
            mv terraform /usr/local/bin/
            terraform --version
      - run:
          name: Run terraform
          command: |
            terraform init
            terraform apply -auto-approve

  chef:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: Chef deployment
          command: |
            apt-get update
            apt-get install -y awscli
            source env.txt
            export $(cut -d= -f1 env.txt)
            HOST="$(aws ec2 describe-instances --filters "Name=tag-value,Values=$TAG" "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicDnsName' --region $REGION | tr -d '\n[]", ')"
            echo $HOST
            while ! ssh -vv -o StrictHostKeyChecking=no ubuntu@$HOST; do echo \"SSH failed, retrying...\" >&2 && sleep 5; done;
            ssh -o StrictHostKeyChecking=no ubuntu@$HOST 'bash -s' < ./chef_commands.sh
            # ssh -o StrictHostKeyChecking=no ubuntu@$HOST 'cd chef-repo; NODE="$(sudo knife node list -z 2>&1 | tail -1)"; sudo knife node run_list add $NODE wp-app::default -z; sudo chef-client -z'


workflows:
  version: 2
  remote_state-and-terraform:
    jobs:
      # - remote_state
      # - terraform:
      #     requires:
      #       - remote_state
      - chef
          # requires:
          #   - remote_state
          #   - terraform
            